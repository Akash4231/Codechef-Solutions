// #pragma GCC optimize ("O3")
#include "bits/stdc++.h"
#include "ext/pb_ds/assoc_container.hpp"
#include "ext/pb_ds/tree_policy.hpp"
using namespace std;
using namespace __gnu_pbds;

template<class T>
using ordered_set = tree<T, null_type, less<T>, rb_tree_tag, tree_order_statistics_node_update> ;

template<class key, class value, class cmp = std::less<key>>
using ordered_map = tree<key, value, cmp, rb_tree_tag, tree_order_statistics_node_update>;
// find_by_order(k)  returns iterator to kth element starting from 0;
// order_of_key(k) returns count of elements strictly smaller than k;

struct custom_hash { // Credits: https://codeforces.com/blog/entry/62393
  static uint64_t splitmix64(uint64_t x) {
    // http://xorshift.di.unimi.it/splitmix64.c
    x += 0x9e3779b97f4a7c15;
    x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
    x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
    return x ^ (x >> 31);
  }

  size_t operator()(uint64_t x) const {
    static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
    return splitmix64(x + FIXED_RANDOM);
  }
  size_t operator()(pair<int64_t, int64_t> Y) const {
    static const uint64_t FIXED_RANDOM = chrono::steady_clock::now().time_since_epoch().count();
    return splitmix64(Y.first * 31 + Y.second + FIXED_RANDOM);
  }
};

template<class T> ostream& operator<<(ostream &os, vector<T> V) {
  os << "[ ";
  for (auto v : V) os << v << " ";
  return os << "]";
}
template<class T> ostream& operator<<(ostream &os, set<T> S) {
  os << "{ ";
  for (auto s : S) os << s << " ";
  return os << "}";
}
template<class T> ostream& operator<<(ostream &os, unordered_set<T> S) {
  os << "{ ";
  for (auto s : S) os << s << " ";
  return os << "}";
}
template<class T> ostream& operator << (ostream& os, multiset<T> S) {
  os << "{ ";
  for (auto s : S) os << s << " ";
  return os << "}";
}
template<class T> ostream& operator<<(ostream &os, ordered_set<T> S) {
  os << "{ ";
  for (auto s : S) os << s << " ";
  return os << "}";
}
template<class L, class R> ostream& operator<<(ostream &os, pair<L, R> P) {
  return os << "(" << P.first << "," << P.second << ")";
}
template<class L, class R> ostream& operator<<(ostream &os, map<L, R> M) {
  os << "{ ";
  for (auto m : M) os << "(" << m.first << ":" << m.second << ") ";
  return os << "}";
}
template<class L, class R, class chash = std::hash<R>> ostream & operator<<(ostream &os, unordered_map<L, R, chash> M) {
  os << "{ ";
  for (auto m : M) os << "(" << m.first << ":" << m.second << ") ";
  return os << "}";
}
template<class L, class R, class chash = std::hash<R> > ostream & operator<<(ostream &os, gp_hash_table<L, R, chash> M) {
  os << "{ ";
  for (auto m : M) os << "(" << m.first << ":" << m.second << ") ";
  return os << "}";
}

#define TRACE
#ifdef TRACE
#define trace(...) __f(#__VA_ARGS__, __VA_ARGS__)
template <typename Arg1>
void __f(const char* name, Arg1&& arg1) {
  cerr << name << " : " << arg1 << endl;
}
template <typename Arg1, typename... Args>
void __f(const char* names, Arg1&& arg1, Args&&... args) {
  const char* comma = strchr(names + 1, ',');
  cerr.write(names, comma - names) << " : " << arg1 << " | ";
  __f(comma + 1, args...);
}
#else
#define trace(...) 1
#endif

mt19937_64 rng(chrono::steady_clock::now().time_since_epoch().count());

inline int64_t random_long(long long l, long long r) {
  uniform_int_distribution<int64_t> generator(l, r);
  return generator(rng);
}
inline int64_t random_long() {
  uniform_int_distribution<int64_t> generator(LLONG_MIN, LLONG_MAX);
  return generator(rng);
}


/*/---------------------------Defines----------------------/*/

//#define int long long
//typedef vector<int> vi;
//typedef pair<int,int> pii;

#define For(i,n) for(int i = 0; i < (int) n; ++i)
#define Rep(i,n) for(int i = 1; i <= (int) n; ++i)
#define ll long long
#define F first
#define S second
#define pb push_back
#define endl "\n"
#define all(v) (v).begin(),(v).end()
/*/-----------------------Modular Arithmetic---------------/*/

const int mod = 1e9 + 7;
inline int add(int x, int y) {
  x += y;
  if (x >= mod) return x - mod;
  return x;
}
inline int sub(int x, int y) {
  x -= y;
  if (x < 0) return x + mod;
  return x;
}
inline int mul(int x, int y) {
  return (x * 1ll * y) % mod;
}
inline int power(int x, int y) {
  int ans = 1;
  while (y) {
    if (y & 1) ans = mul(ans, x);
    x = mul(x, x);
    y >>= 1;
  }
  return ans;
}
inline int inv(int x) {
  int g = __gcd(x, mod);
  if (g != 1)
    return -1; //modular multiplicative inverse does not exist

  return power(x, mod - 2);
}
/*/-----------------------------Code begins----------------------------------/*/

void solve () {
  string s;
  cin >> s;

  int x1, y1;
  cin >> x1 >> y1;

  //cout << x1 << " " << y1 << endl;

  int hash[4] = {0};
  //memset(hash, 0, sizeof(hash));

  for (int i = 0; i < s.length(); i++) {
    if (s[i] == 'R')  hash[0]++;
    if (s[i] == 'L') hash[1]++;
    if (s[i] == 'U') hash[2]++;
    if (s[i] == 'D')hash[3]++;
  }

  //for (int i = 0; i < 4; i++)cout << hash[i] << " ";
  //cout << endl;

  int q;
  cin >> q;

  //cout << q << endl;

  while (q--) {

    int x2, y2;
    cin >> x2 >> y2;

    //cout << x2 << " " << y2 << endl;

    int pp = x2 - x1;
    int qq = y2 - y1;
    int abspp = abs(pp);
    int absqq = abs(qq);



    //cout << pp << " " << qq << endl;

    if (pp > 0) { //RIGHT
      if (hash[0] < abspp) {
        cout << "NO" << endl;
        continue;
      }
    }

    if (qq > 0) { //UP
      if (hash[2] < absqq) {
        cout << "NO" << endl;
        continue;
      }
    }

    if (pp < 0) { //LEFT
      if (hash[1] < abspp) {
        cout << "NO" << endl;
        continue;
      }
    }


    if (qq < 0) { //DOWN
      if (hash[3] < absqq) {
        cout << "NO" << endl;
        continue;
      }
    }

    cout << "YES " << abspp + absqq;
    cout << endl;

  }
}

signed main() {
  // Use "set_name".max_load_factor(0.25);"set_name".reserve(512); with unordered set
  // Or use gp_hash_table<X,null_type>
  ios_base::sync_with_stdio(false); cin.tie(NULL); cout.tie(NULL);
  cout << fixed << setprecision(25);
  cerr << fixed << setprecision(10);
  auto start = std::chrono::high_resolution_clock::now();
  int t = 1;
  cin >> t;
  for (int i = 1; i <= t; ++i) {
    //cout<<"Case #"<<i<<": ";
    solve();
    //printf("\n");
  }
  auto stop = std::chrono::high_resolution_clock::now();
  auto duration = std::chrono::duration_cast<std::chrono::nanoseconds>(stop - start);

  //cerr << "Time taken : " << ((long double)duration.count())/((long double) 1e9) <<"s "<< endl;
}








/*//#include <bits/stdc++.h>
#include <cmath>
#include <functional>
#include <fstream>
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#include <set>
#include <map>
#include <list>
#include <time.h>
#include <math.h>
#include <random>
#include <deque>
#include <queue>
#include <cassert>
#include <unordered_map>
#include <unordered_set>
#include <iomanip>
#include <bitset>
#include <sstream>
#include <chrono>
#include <cstring>
#define fastio ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std; typedef long long ll; typedef unsigned long long ull; int MOD = 1000000007;



void solve () {
  string s;
  cin >> s;

  int x1, y1;
  cin >> x1 >> y1;

  //cout << x1 << " " << y1 << endl;

  int hash[4] = {0};
  //memset(hash, 0, sizeof(hash));

  for (int i = 0; i < s.length(); i++) {
    if (s[i] == 'R')  hash[0]++;
    if (s[i] == 'L') hash[1]++;
    if (s[i] == 'U') hash[2]++;
    if (s[i] == 'D')hash[3]++;
  }

  //for (int i = 0; i < 4; i++)cout << hash[i] << " ";
  //cout << endl;

  int q;
  cin >> q;

  //cout << q << endl;

  while (q--) {

    int x2, y2;
    cin >> x2 >> y2;

    //cout << x2 << " " << y2 << endl;

    int pp = x2 - x1;
    int qq = y2 - y1;
    int abspp = abs(pp);
    int absqq = abs(qq);



    //cout << pp << " " << qq << endl;

    if (pp > 0) { //RIGHT
      if (hash[0] < abspp) {
        cout << "NO" << endl;
        continue;
      }
    }

    if (qq > 0) { //UP
      if (hash[2] < absqq) {
        cout << "NO" << endl;
        continue;
      }
    }

    if (pp < 0) { //LEFT
      if (hash[1] < abspp) {
        cout << "NO" << endl;
        continue;
      }
    }


    if (qq < 0) { //DOWN
      if (hash[3] < absqq) {
        cout << "NO" << endl;
        continue;
      }
    }

    cout << "YES " << abspp + absqq;
    cout << endl;

  }
}


int main() {

  //fastio
  ios_base::sync_with_stdio(false);
  cin.tie(NULL);
  //cout.tie(NULL);

  int t;
  cin >> t;
  //scanf("%d", &t);

  while (t--) {
    solve();
    //cout << endl;
  }
  return 0;
}

#include <bits/stdc++.h>
#define fastio ios_base::sync_with_stdio(false);cin.tie(NULL);cout.tie(NULL);
using namespace std; typedef long long ll; typedef unsigned long long ull; int MOD = 1000000007;

int mat[1005][1005];

void solve () {
  int n,m;
  cin >> n>>m;
  //vector<int> a;
  for (int i = 0; i < n; i++) {
    for (int j=0;j<m;j++){
      cin>>a[i][j];
    }
  }
  int q;
  cin>>q;
  while (q--){
    int x1,x2,y1,y2;
    cin>>x1>>y1>>x2>>y2;
    x1--;x2--;y1--;y2--;
  }
}


int main() {

  fastio

  int t = 1;
  //cin >> t;
  while (t--) {
    solve();
    cout << endl;
  }
  return 0;
}*/

